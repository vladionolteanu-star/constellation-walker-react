import { useEffect } from 'react'
import { Toaster } from 'react-hot-toast'
import { AnimatePresence } from 'framer-motion'
import AppLayout from './components/Layout/AppLayout'
import LoadingScreen from './components/UI/LoadingScreen'
import { useUserStore } from './store/userStore'
import { useSupabaseRealtime } from './hooks/useSupabaseRealtime'
import { useGeolocation } from './hooks/useGeolocation'

function App() {
  const { isLoading, currentUser, initializeUser } = useUserStore()
  const { startRealtime } = useSupabaseRealtime()
  const { requestPermission } = useGeolocation()

  useEffect(() => {
    const init = async () => {
      // Initialize user first
      await initializeUser()
    }
    init()
  }, [initializeUser])

  // Start realtime and request location after user is initialized
  useEffect(() => {
    if (currentUser && !isLoading) {
      const setupApp = async () => {
        // Request location permission
        const locationGranted = await requestPermission()
        
        if (locationGranted) {
          // Start realtime sync
          startRealtime()
        }
      }
      
      setupApp()
    }
  }, [currentUser, isLoading, requestPermission, startRealtime])

  return (
    <>
      <AnimatePresence mode="wait">
        {isLoading || !currentUser ? (
          <LoadingScreen key="loading" />
        ) : (
          <AppLayout key="app" />
        )}
      </AnimatePresence>
      
      <Toaster
        position="top-center"
        toastOptions={{
          duration: 3000,
          style: {
            background: 'rgba(0, 0, 0, 0.9)',
            color: '#fff',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            borderRadius: '12px',
            backdropFilter: 'blur(20px)',
            fontSize: '14px',
            fontWeight: '500'
          },
          success: {
            iconTheme: {
              primary: '#00FF88',
              secondary: '#000'
            }
          },
          error: {
            iconTheme: {
              primary: '#FF3366',
              secondary: '#000'
            }
          }
        }}
      />
    </>
  )
}

export default App
